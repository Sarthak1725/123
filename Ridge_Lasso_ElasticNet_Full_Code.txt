### Ridge, Lasso, and ElasticNet Full Code with Evaluation and Visualization ###
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge, Lasso, ElasticNet
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
df = pd.read_csv('Assignment 2 Advertising (1).csv')
X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize models
ridge = Ridge(alpha=1.0)
lasso = Lasso(alpha=0.1)
elastic = ElasticNet(alpha=0.1, l1_ratio=0.5)

# Train models
ridge.fit(X_train, y_train)
lasso.fit(X_train, y_train)
elastic.fit(X_train, y_train)

# Predict
y_pred_ridge = ridge.predict(X_test)
y_pred_lasso = lasso.predict(X_test)
y_pred_elastic = elastic.predict(X_test)

# Evaluate
def evaluate(name, y_true, y_pred):
    print(f"--- {name} ---")
    print("RÂ² Score:", r2_score(y_true, y_pred))
    print("MSE:", mean_squared_error(y_true, y_pred))
    print("RMSE:", np.sqrt(mean_squared_error(y_true, y_pred)))
    print()

evaluate("Ridge", y_test, y_pred_ridge)
evaluate("Lasso", y_test, y_pred_lasso)
evaluate("ElasticNet", y_test, y_pred_elastic)

# Plot predictions
plt.figure(figsize=(10,6))
plt.plot(y_test.values, label='Actual', color='black')
plt.plot(y_pred_ridge, label='Ridge', linestyle='--')
plt.plot(y_pred_lasso, label='Lasso', linestyle='-.')
plt.plot(y_pred_elastic, label='ElasticNet', linestyle=':')
plt.legend()
plt.title("Predicted vs Actual Sales - Regularization Models")
plt.xlabel("Test Samples")
plt.ylabel("Sales")
plt.show()
